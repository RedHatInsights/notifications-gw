/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.redhat.cloud.notifications.ingress;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Action extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3675686353663277755L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Action\",\"namespace\":\"com.redhat.cloud.notifications.ingress\",\"fields\":[{\"name\":\"bundle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"application\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"event_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"logicalType\":\"iso-8601\"}},{\"name\":\"account_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"logicalType\":\"json-object\"},\"default\":\"{}\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new com.redhat.cloud.notifications.avro.JsonObjectConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Action> ENCODER =
          new BinaryMessageEncoder<Action>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Action> DECODER =
          new BinaryMessageDecoder<Action>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Action> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Action> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Action> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Action>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Action to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Action from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Action instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Action fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String bundle;
  private java.lang.String application;
  private java.lang.String event_type;
  private java.time.LocalDateTime timestamp;
  private java.lang.String account_id;
  private java.util.Map payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Action() {}

  /**
   * All-args constructor.
   * @param bundle The new value for bundle
   * @param application The new value for application
   * @param event_type The new value for event_type
   * @param timestamp The new value for timestamp
   * @param account_id The new value for account_id
   * @param payload The new value for payload
   */
  public Action(java.lang.String bundle, java.lang.String application, java.lang.String event_type, java.time.LocalDateTime timestamp, java.lang.String account_id, java.util.Map payload) {
    this.bundle = bundle;
    this.application = application;
    this.event_type = event_type;
    this.timestamp = timestamp;
    this.account_id = account_id;
    this.payload = payload;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return bundle;
      case 1: return application;
      case 2: return event_type;
      case 3: return timestamp;
      case 4: return account_id;
      case 5: return payload;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
          new org.apache.avro.Conversion<?>[] {
                  null,
                  null,
                  null,
                  new com.redhat.cloud.notifications.avro.Iso8601Conversion(),
                  null,
                  new com.redhat.cloud.notifications.avro.JsonObjectConversion(),
                  null
          };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: bundle = value$ != null ? value$.toString() : null; break;
      case 1: application = value$ != null ? value$.toString() : null; break;
      case 2: event_type = value$ != null ? value$.toString() : null; break;
      case 3: timestamp = (java.time.LocalDateTime)value$; break;
      case 4: account_id = value$ != null ? value$.toString() : null; break;
      case 5: payload = (java.util.Map)value$; break;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bundle' field.
   * @return The value of the 'bundle' field.
   */
  public java.lang.String getBundle() {
    return bundle;
  }


  /**
   * Sets the value of the 'bundle' field.
   * @param value the value to set.
   */
  public void setBundle(java.lang.String value) {
    this.bundle = value;
  }

  /**
   * Gets the value of the 'application' field.
   * @return The value of the 'application' field.
   */
  public java.lang.String getApplication() {
    return application;
  }


  /**
   * Sets the value of the 'application' field.
   * @param value the value to set.
   */
  public void setApplication(java.lang.String value) {
    this.application = value;
  }

  /**
   * Gets the value of the 'event_type' field.
   * @return The value of the 'event_type' field.
   */
  public java.lang.String getEventType() {
    return event_type;
  }


  /**
   * Sets the value of the 'event_type' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.event_type = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.LocalDateTime getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.LocalDateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'account_id' field.
   * @return The value of the 'account_id' field.
   */
  public java.lang.String getAccountId() {
    return account_id;
  }


  /**
   * Sets the value of the 'account_id' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.String value) {
    this.account_id = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.util.Map getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.util.Map value) {
    this.payload = value;
  }

  /**
   * Creates a new Action RecordBuilder.
   * @return A new Action RecordBuilder
   */
  public static com.redhat.cloud.notifications.ingress.Action.Builder newBuilder() {
    return new com.redhat.cloud.notifications.ingress.Action.Builder();
  }

  /**
   * Creates a new Action RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Action RecordBuilder
   */
  public static com.redhat.cloud.notifications.ingress.Action.Builder newBuilder(com.redhat.cloud.notifications.ingress.Action.Builder other) {
    if (other == null) {
      return new com.redhat.cloud.notifications.ingress.Action.Builder();
    } else {
      return new com.redhat.cloud.notifications.ingress.Action.Builder(other);
    }
  }

  /**
   * Creates a new Action RecordBuilder by copying an existing Action instance.
   * @param other The existing instance to copy.
   * @return A new Action RecordBuilder
   */
  public static com.redhat.cloud.notifications.ingress.Action.Builder newBuilder(com.redhat.cloud.notifications.ingress.Action other) {
    if (other == null) {
      return new com.redhat.cloud.notifications.ingress.Action.Builder();
    } else {
      return new com.redhat.cloud.notifications.ingress.Action.Builder(other);
    }
  }

  /**
   * RecordBuilder for Action instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Action>
          implements org.apache.avro.data.RecordBuilder<Action> {

    private java.lang.String bundle;
    private java.lang.String application;
    private java.lang.String event_type;
    private java.time.LocalDateTime timestamp;
    private java.lang.String account_id;
    private java.util.Map payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.redhat.cloud.notifications.ingress.Action.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bundle)) {
        this.bundle = data().deepCopy(fields()[0].schema(), other.bundle);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.application)) {
        this.application = data().deepCopy(fields()[1].schema(), other.application);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.event_type)) {
        this.event_type = data().deepCopy(fields()[2].schema(), other.event_type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.account_id)) {
        this.account_id = data().deepCopy(fields()[4].schema(), other.account_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.payload)) {
        this.payload = data().deepCopy(fields()[5].schema(), other.payload);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Action instance
     * @param other The existing instance to copy.
     */
    private Builder(com.redhat.cloud.notifications.ingress.Action other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bundle)) {
        this.bundle = data().deepCopy(fields()[0].schema(), other.bundle);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.application)) {
        this.application = data().deepCopy(fields()[1].schema(), other.application);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_type)) {
        this.event_type = data().deepCopy(fields()[2].schema(), other.event_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.account_id)) {
        this.account_id = data().deepCopy(fields()[4].schema(), other.account_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.payload)) {
        this.payload = data().deepCopy(fields()[5].schema(), other.payload);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Gets the value of the 'bundle' field.
     * @return The value.
     */
    public java.lang.String getBundle() {
      return bundle;
    }


    /**
     * Sets the value of the 'bundle' field.
     * @param value The value of 'bundle'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setBundle(java.lang.String value) {
      validate(fields()[0], value);
      this.bundle = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'bundle' field has been set.
     * @return True if the 'bundle' field has been set, false otherwise.
     */
    public boolean hasBundle() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'bundle' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearBundle() {
      bundle = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'application' field.
     * @return The value.
     */
    public java.lang.String getApplication() {
      return application;
    }


    /**
     * Sets the value of the 'application' field.
     * @param value The value of 'application'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setApplication(java.lang.String value) {
      validate(fields()[1], value);
      this.application = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'application' field has been set.
     * @return True if the 'application' field has been set, false otherwise.
     */
    public boolean hasApplication() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'application' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearApplication() {
      application = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'event_type' field.
     * @return The value.
     */
    public java.lang.String getEventType() {
      return event_type;
    }


    /**
     * Sets the value of the 'event_type' field.
     * @param value The value of 'event_type'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setEventType(java.lang.String value) {
      validate(fields()[2], value);
      this.event_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'event_type' field has been set.
     * @return True if the 'event_type' field has been set, false otherwise.
     */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'event_type' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearEventType() {
      event_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value.
     */
    public java.time.LocalDateTime getTimestamp() {
      return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setTimestamp(java.time.LocalDateTime value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set.
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'timestamp' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'account_id' field.
     * @return The value.
     */
    public java.lang.String getAccountId() {
      return account_id;
    }


    /**
     * Sets the value of the 'account_id' field.
     * @param value The value of 'account_id'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setAccountId(java.lang.String value) {
      validate(fields()[4], value);
      this.account_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'account_id' field has been set.
     * @return True if the 'account_id' field has been set, false otherwise.
     */
    public boolean hasAccountId() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'account_id' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearAccountId() {
      account_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'payload' field.
     * @return The value.
     */
    public java.util.Map getPayload() {
      return payload;
    }


    /**
     * Sets the value of the 'payload' field.
     * @param value The value of 'payload'.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder setPayload(java.util.Map value) {
      validate(fields()[5], value);
      this.payload = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'payload' field has been set.
     * @return True if the 'payload' field has been set, false otherwise.
     */
    public boolean hasPayload() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'payload' field.
     * @return This builder.
     */
    public com.redhat.cloud.notifications.ingress.Action.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Action build() {
      try {
        Action record = new Action();
        record.bundle = fieldSetFlags()[0] ? this.bundle : (java.lang.String) defaultValue(fields()[0]);
        record.application = fieldSetFlags()[1] ? this.application : (java.lang.String) defaultValue(fields()[1]);
        record.event_type = fieldSetFlags()[2] ? this.event_type : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.time.LocalDateTime) defaultValue(fields()[3]);
        record.account_id = fieldSetFlags()[4] ? this.account_id : (java.lang.String) defaultValue(fields()[4]);
        record.payload = fieldSetFlags()[5] ? this.payload : (java.util.Map) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Action>
          WRITER$ = (org.apache.avro.io.DatumWriter<Action>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Action>
          READER$ = (org.apache.avro.io.DatumReader<Action>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
